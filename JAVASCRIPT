// Check for saved theme preference on page load
document.addEventListener('DOMContentLoaded', () => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme === 'dark') {
        document.body.classList.add('dark-mode');
    }
    updateButtonColors(); // Ensure buttons have the correct theme color on load
});

// Theme toggle functionality
const themeButton = document.getElementById("theme-button");
if (themeButton) {
    themeButton.addEventListener("click", () => {
        document.body.classList.toggle("dark-mode");
        const isDark = document.body.classList.contains('dark-mode');
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
        updateButtonColors();
    });
}

// Function to update button colors based on theme
function updateButtonColors() {
    const isDarkMode = document.body.classList.contains('dark-mode');
    const buttons = document.querySelectorAll("#theme-button, #reduce-motion-btn");
    buttons.forEach(button => {
        button.style.backgroundColor = isDarkMode ? "var(--primary-dark)" : "var(--secondary-light)";
        button.style.color = isDarkMode ? "white" : "var(--primary-light)";
    });
}

// Reduce Motion functionality
const reduceMotionButton = document.getElementById("reduce-motion-btn");
if (reduceMotionButton) {
    reduceMotionButton.addEventListener("click", () => {
        reduceMotion();
        updateButtonColors();
    });
}

// Reduce Motion Settings
const reduceMotion = () => {
    const animation = {
        transitionDuration: '0.5s',
        revealDistance: '50px'
    };
    const revealableContainers = document.querySelectorAll('.revealable');
    revealableContainers.forEach(container => {
        container.style.transition = `transform ${animation.transitionDuration}, opacity ${animation.transitionDuration}`;
        container.style.transform = `translateY(${animation.revealDistance})`;
        container.style.opacity = '0.8'; // Example reduced effect
    });
};

// Initialize signature counter and add signatures
let count = 0; // Changed signature count to start from 0
const updateSignatureCounter = () => {
    document.getElementById("counter").textContent = ` ${count} people have signed this petition and support this cause.`;
};
updateSignatureCounter();

const addSignature = () => {
    const name = document.getElementById("name").value.trim();
    const hometown = document.getElementById("hometown").value.trim();

    if (name && hometown) {
        const newSignature = document.createElement("p");
        newSignature.textContent = ` ${name} from ${hometown}`;
        document.querySelector(".signatures").appendChild(newSignature);
        count++;
        updateSignatureCounter();
        document.getElementById("name").value = "";
        document.getElementById("hometown").value = "";
        openModal(); // Open the modal after a successful signature
    } else {
        alert("Please enter both your name and hometown to sign the petition.");
    }
};

// Add signature on button click
const signNowButton = document.getElementById("sign-now-button");
if (signNowButton) {
    signNowButton.addEventListener("click", addSignature);
}

// Add this JavaScript to handle the enhanced functionality
document.addEventListener('DOMContentLoaded', () => {
    // Scroll reveal functionality
    const observerOptions = {
        threshold: 0.15,
        rootMargin: '0px'
    };

    const observer = new IntersectionObserver((entries) => {
        entries.forEach(entry => {
            if (entry.isIntersecting) {
                entry.target.classList.add('active');
            } else {
                entry.target.classList.remove('active');
            }
        });
    }, observerOptions);

    document.querySelectorAll('.revealable').forEach(element => {
        observer.observe(element);
    });

    // Enhanced modal functionality
    function showModal(name) {
        const modal = document.querySelector('.modal');
        const modalImage = document.querySelector('.modal-image');
        const modalMessage = document.querySelector('.modal-message');

        modalMessage.textContent = `Thank you ${name} for signing our petition!`;
        modal.classList.add('show');
        
        // Animate image
        setTimeout(() => {
            modalImage.classList.add('animate');
        }, 100);

        // Auto-close after 5 seconds
        setTimeout(() => {
            closeModal();
        }, 5000);
    }

    function closeModal() {
        const modal = document.querySelector('.modal');
        const modalImage = document.querySelector('.modal-image');
        
        modal.classList.remove('show');
        modalImage.classList.remove('animate');
    }

    // Update petition form submission
    const petitionForm = document.getElementById('petition-form');
    if (petitionForm) {
        petitionForm.addEventListener('submit', (e) => {
            e.preventDefault();
            const name = document.getElementById('name').value.trim();
            const email = document.getElementById('email').value.trim();

            if (name && email && validateEmail(email)) {
                addSignature(name);
                showModal(name);
                petitionForm.reset();
            }
        });
    }

    // Reduce motion toggle
    const reduceMotionBtn = document.getElementById('reduce-motion-btn');
    if (reduceMotionBtn) {
        reduceMotionBtn.addEventListener('click', () => {
            document.body.classList.toggle('reduce-motion');
            reduceMotionBtn.textContent = document.body.classList.contains('reduce-motion') 
                ? 'Enable Animations' 
                : 'Reduce Motion';
        });
    }

    // Close modal button
    const closeModalBtn = document.querySelector('.modal .close');
    if (closeModalBtn) {
        closeModalBtn.addEventListener('click', closeModal);
    }
});
